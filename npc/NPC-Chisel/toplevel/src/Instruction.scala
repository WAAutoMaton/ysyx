import chisel3.util.BitPat
object Instruction {
  // R type
  def ADD   = BitPat("b0000000 ????? ????? 000 ????? 01100 11")
  def SUB   = BitPat("b0100000 ????? ????? 000 ????? 01100 11")
  def XOR   = BitPat("b0000000 ????? ????? 100 ????? 01100 11")
  def OR    = BitPat("b0000000 ????? ????? 110 ????? 01100 11")
  def AND   = BitPat("b0000000 ????? ????? 111 ????? 01100 11")
  def SLL   = BitPat("b0000000 ????? ????? 001 ????? 01100 11")
  def SRL   = BitPat("b0000000 ????? ????? 101 ????? 01100 11")
  def SRA   = BitPat("b0100000 ????? ????? 101 ????? 01100 11")
  def SLT   = BitPat("b0000000 ????? ????? 010 ????? 01100 11")
  def SLTU  = BitPat("b0000000 ????? ????? 011 ????? 01100 11")

  //TODO RV32M

  //I type
  def ADDI  = BitPat("b??????? ????? ????? 000 ????? 00100 11")
  def XORI  = BitPat("b??????? ????? ????? 100 ????? 00100 11")
  def ORI   = BitPat("b??????? ????? ????? 110 ????? 00100 11")
  def ANDI  = BitPat("b??????? ????? ????? 111 ????? 00100 11")
  def SLLI  = BitPat("b0000000 ????? ????? 001 ????? 00100 11")
  def SRLI  = BitPat("b0000000 ????? ????? 101 ????? 00100 11")
  def SRAI  = BitPat("b0100000 ????? ????? 101 ????? 00100 11")
  def SLTI  = BitPat("b??????? ????? ????? 010 ????? 00100 11")
  def SLTIU = BitPat("b??????? ????? ????? 011 ????? 00100 11")

  // Load
  def LB    = BitPat("b??????? ????? ????? 000 ????? 00000 11")
  def LH    = BitPat("b??????? ????? ????? 001 ????? 00000 11")
  def LW    = BitPat("b??????? ????? ????? 010 ????? 00000 11")
  def LBU   = BitPat("b??????? ????? ????? 100 ????? 00000 11")
  def LHU   = BitPat("b??????? ????? ????? 101 ????? 00000 11")

  // Store
  def SB    = BitPat("b??????? ????? ????? 000 ????? 01000 11")
  def SH    = BitPat("b??????? ????? ????? 001 ????? 01000 11")
  def SW    = BitPat("b??????? ????? ????? 010 ????? 01000 11")

  // TODO: Branch

  // Jump
  def JAL   = BitPat("b??????? ????? ????? ??? ????? 11011 11")
  def JALR  = BitPat("b??????? ????? ????? 000 ????? 11001 11")
  def LUI   = BitPat("b??????? ????? ????? ??? ????? 01101 11")
  def AUIPC = BitPat("b??????? ????? ????? ??? ????? 00101 11")

  // virtual instruction
  def EBREAK= BitPat("b0000000 00001 00000 000 00000 11100 11")
  def INV   = BitPat("b??????? ????? ????? ??? ????? ????? ??")
}
